// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// if left bit == 0 -> A Command just save
    // if left bit == 1 ->  C command -> Needs inerpretation


    // [6-11] -c bits
    Not(in=instruction[11], out=notC11);
    Not(in=instruction[10], out=notC10);
    Not(in=instruction[9], out=notC9);
    Not(in=instruction[8], out=notC8);
    Not(in=instruction[7], out=notC7);
    Not(in=instruction[6], out=notC6);

    // ALU x value -------------------
    And(a=notC11, b=notC10, out=notC11AndNotC10);
    And(a=notC11AndNotC10, b=notC9, out=notLast3C);
    And(a=notC11AndNotC10, b=instruction[8], out=cc);
    And(a=notC11AndNotC10, b=instruction[7], out=ccc);
    And(a=notC11AndNotC10, b=instruction[6], out=isAValueSpecial);

    Or(a=instruction[11], b=isAValueSpecial, out=isAValue);

    Mux16(a=registerD, b=registerA, sel=isAValue, out=a0X);
    Mux16(a=registerD, b=memoryOut, sel=isAValue, out=a1X);

    Mux16(a=a0X, b=a1X, sel=instruction[12], out=x);
    // ---------------------------------------------------------

    // ALU y value --------------------------------------
    Not(in=isAValue, out=dValue);
    Mux16(a=registerA, b=registerD, sel=dValue, out=a0Y);
    Mux16(a=registerA, b=registerD, sel=dValue, out=a1Y);
    Mux16(a=a0Y, b=a1Y, sel=instruction[12], out=y);
    // ---------------------------------------------------------


    ALU(x=x, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=zr, ng=ng);
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aValue);


    // [3,5] - d bits
    //A register
    Not(in=instruction[15], out=notC);
    Or(a=notC, b=instruction[5], out=loadA);  
    Register(
        in=aValue, 
        load=loadA,
        out=registerA,
        out[0]=a0,
        out[1]=a1,
        out[2]=a2, 
        out[3]=a3, 
        out[4]=a4, 
        out[5]=a5, 
        out[6]=a6, 
        out[7]=a7, 
        out[8]=a8, 
        out[9]=a9, 
        out[10]=a10, 
        out[11]=a11, 
        out[12]=a12, 
        out[13]=a13
    );

    Register(in=aluOut, load=instruction[4], out=registerD);


    // PC(in=, load=, inc=, reset=reset, out=pcOut);

    //Memory
    //load if lowest d === 1, пусть будет 
    RAM16K(
        in=aluOut, 
        load=instruction[3], 
        address[0]=a0,
        address[1]=a1,
        address[2]=a2,
        address[3]=a3,
        address[4]=a4,
        address[5]=a5,
        address[6]=a6,
        address[7]=a7,
        address[8]=a8,
        address[9]=a9,
        address[10]=a10,
        address[11]=a11, 
        address[12]=a12, 
        address[13]=a13,
        out=memoryOut,
        out=outM
    );

    PC(in=false, load=false, inc=true, reset=reset, out=pcOut);
}